// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "github.com/apoxy-dev/apoxy-cli/api/core/v1alpha"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DomainLister helps list Domains.
// All objects returned here must be treated as read-only.
type DomainLister interface {
	// List lists all Domains in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha.Domain, err error)
	// Get retrieves the Domain from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha.Domain, error)
	DomainListerExpansion
}

// domainLister implements the DomainLister interface.
type domainLister struct {
	indexer cache.Indexer
}

// NewDomainLister returns a new DomainLister.
func NewDomainLister(indexer cache.Indexer) DomainLister {
	return &domainLister{indexer: indexer}
}

// List lists all Domains in the indexer.
func (s *domainLister) List(selector labels.Selector) (ret []*v1alpha.Domain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.Domain))
	})
	return ret, err
}

// Get retrieves the Domain from the index for a given name.
func (s *domainLister) Get(name string) (*v1alpha.Domain, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("domain"), name)
	}
	return obj.(*v1alpha.Domain), nil
}
