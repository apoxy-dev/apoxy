/*
Copyright 2025 Apoxy, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "github.com/apoxy-dev/apoxy-cli/api/core/v1alpha"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TunnelPeerOfferLister helps list TunnelPeerOffers.
// All objects returned here must be treated as read-only.
type TunnelPeerOfferLister interface {
	// List lists all TunnelPeerOffers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha.TunnelPeerOffer, err error)
	// Get retrieves the TunnelPeerOffer from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha.TunnelPeerOffer, error)
	TunnelPeerOfferListerExpansion
}

// tunnelPeerOfferLister implements the TunnelPeerOfferLister interface.
type tunnelPeerOfferLister struct {
	indexer cache.Indexer
}

// NewTunnelPeerOfferLister returns a new TunnelPeerOfferLister.
func NewTunnelPeerOfferLister(indexer cache.Indexer) TunnelPeerOfferLister {
	return &tunnelPeerOfferLister{indexer: indexer}
}

// List lists all TunnelPeerOffers in the indexer.
func (s *tunnelPeerOfferLister) List(selector labels.Selector) (ret []*v1alpha.TunnelPeerOffer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.TunnelPeerOffer))
	})
	return ret, err
}

// Get retrieves the TunnelPeerOffer from the index for a given name.
func (s *tunnelPeerOfferLister) Get(name string) (*v1alpha.TunnelPeerOffer, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("tunnelpeeroffer"), name)
	}
	return obj.(*v1alpha.TunnelPeerOffer), nil
}
