/*
Copyright 2025 Apoxy, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by informer-gen. DO NOT EDIT.

package v1alpha2

import (
	"context"
	time "time"

	corev1alpha2 "github.com/apoxy-dev/apoxy/api/core/v1alpha2"
	internalinterfaces "github.com/apoxy-dev/apoxy/client/informers/internalinterfaces"
	v1alpha2 "github.com/apoxy-dev/apoxy/client/listers/core/v1alpha2"
	versioned "github.com/apoxy-dev/apoxy/client/versioned"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// TunnelAgentInformer provides access to a shared informer and lister for
// TunnelAgents.
type TunnelAgentInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha2.TunnelAgentLister
}

type tunnelAgentInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewTunnelAgentInformer constructs a new informer for TunnelAgent type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewTunnelAgentInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredTunnelAgentInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredTunnelAgentInformer constructs a new informer for TunnelAgent type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredTunnelAgentInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoreV1alpha2().TunnelAgents().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoreV1alpha2().TunnelAgents().Watch(context.TODO(), options)
			},
		},
		&corev1alpha2.TunnelAgent{},
		resyncPeriod,
		indexers,
	)
}

func (f *tunnelAgentInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredTunnelAgentInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *tunnelAgentInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&corev1alpha2.TunnelAgent{}, f.defaultInformer)
}

func (f *tunnelAgentInformer) Lister() v1alpha2.TunnelAgentLister {
	return v1alpha2.NewTunnelAgentLister(f.Informer().GetIndexer())
}
