// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha "github.com/apoxy-dev/apoxy-cli/api/core/v1alpha"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAddresses implements AddressInterface
type FakeAddresses struct {
	Fake *FakeCoreV1alpha
}

var addressesResource = v1alpha.SchemeGroupVersion.WithResource("addresses")

var addressesKind = v1alpha.SchemeGroupVersion.WithKind("Address")

// Get takes name of the address, and returns the corresponding address object, and an error if there is any.
func (c *FakeAddresses) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha.Address, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(addressesResource, name), &v1alpha.Address{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha.Address), err
}

// List takes label and field selectors, and returns the list of Addresses that match those selectors.
func (c *FakeAddresses) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha.AddressList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(addressesResource, addressesKind, opts), &v1alpha.AddressList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha.AddressList{ListMeta: obj.(*v1alpha.AddressList).ListMeta}
	for _, item := range obj.(*v1alpha.AddressList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested addresses.
func (c *FakeAddresses) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(addressesResource, opts))
}

// Create takes the representation of a address and creates it.  Returns the server's representation of the address, and an error, if there is any.
func (c *FakeAddresses) Create(ctx context.Context, address *v1alpha.Address, opts v1.CreateOptions) (result *v1alpha.Address, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(addressesResource, address), &v1alpha.Address{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha.Address), err
}

// Update takes the representation of a address and updates it. Returns the server's representation of the address, and an error, if there is any.
func (c *FakeAddresses) Update(ctx context.Context, address *v1alpha.Address, opts v1.UpdateOptions) (result *v1alpha.Address, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(addressesResource, address), &v1alpha.Address{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha.Address), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeAddresses) UpdateStatus(ctx context.Context, address *v1alpha.Address, opts v1.UpdateOptions) (*v1alpha.Address, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(addressesResource, "status", address), &v1alpha.Address{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha.Address), err
}

// Delete takes name of the address and deletes it. Returns an error if one occurs.
func (c *FakeAddresses) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(addressesResource, name, opts), &v1alpha.Address{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAddresses) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(addressesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha.AddressList{})
	return err
}

// Patch applies the patch and returns the patched address.
func (c *FakeAddresses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha.Address, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(addressesResource, name, pt, data, subresources...), &v1alpha.Address{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha.Address), err
}
