// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "github.com/apoxy-dev/apoxy-cli/api/gateway/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeGRPCRoutes implements GRPCRouteInterface
type FakeGRPCRoutes struct {
	Fake *FakeGatewayV1
}

var grpcroutesResource = v1.SchemeGroupVersion.WithResource("grpcroutes")

var grpcroutesKind = v1.SchemeGroupVersion.WithKind("GRPCRoute")

// Get takes name of the gRPCRoute, and returns the corresponding gRPCRoute object, and an error if there is any.
func (c *FakeGRPCRoutes) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.GRPCRoute, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(grpcroutesResource, name), &v1.GRPCRoute{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.GRPCRoute), err
}

// List takes label and field selectors, and returns the list of GRPCRoutes that match those selectors.
func (c *FakeGRPCRoutes) List(ctx context.Context, opts metav1.ListOptions) (result *v1.GRPCRouteList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(grpcroutesResource, grpcroutesKind, opts), &v1.GRPCRouteList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.GRPCRouteList{ListMeta: obj.(*v1.GRPCRouteList).ListMeta}
	for _, item := range obj.(*v1.GRPCRouteList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested gRPCRoutes.
func (c *FakeGRPCRoutes) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(grpcroutesResource, opts))
}

// Create takes the representation of a gRPCRoute and creates it.  Returns the server's representation of the gRPCRoute, and an error, if there is any.
func (c *FakeGRPCRoutes) Create(ctx context.Context, gRPCRoute *v1.GRPCRoute, opts metav1.CreateOptions) (result *v1.GRPCRoute, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(grpcroutesResource, gRPCRoute), &v1.GRPCRoute{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.GRPCRoute), err
}

// Update takes the representation of a gRPCRoute and updates it. Returns the server's representation of the gRPCRoute, and an error, if there is any.
func (c *FakeGRPCRoutes) Update(ctx context.Context, gRPCRoute *v1.GRPCRoute, opts metav1.UpdateOptions) (result *v1.GRPCRoute, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(grpcroutesResource, gRPCRoute), &v1.GRPCRoute{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.GRPCRoute), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeGRPCRoutes) UpdateStatus(ctx context.Context, gRPCRoute *v1.GRPCRoute, opts metav1.UpdateOptions) (*v1.GRPCRoute, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(grpcroutesResource, "status", gRPCRoute), &v1.GRPCRoute{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.GRPCRoute), err
}

// Delete takes name of the gRPCRoute and deletes it. Returns an error if one occurs.
func (c *FakeGRPCRoutes) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(grpcroutesResource, name, opts), &v1.GRPCRoute{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeGRPCRoutes) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(grpcroutesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1.GRPCRouteList{})
	return err
}

// Patch applies the patch and returns the patched gRPCRoute.
func (c *FakeGRPCRoutes) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.GRPCRoute, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(grpcroutesResource, name, pt, data, subresources...), &v1.GRPCRoute{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.GRPCRoute), err
}
