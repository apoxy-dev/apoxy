apiVersion: controllers.apoxy.dev/v1alpha1
kind: Proxy
metadata:
  name: example
spec:
  provider: unmanaged
  listeners:
    - protocol: TCP
      port: 10000
---
apiVersion: gateway.apoxy.dev/v1
kind: GatewayClass
metadata:
  name: apoxy
spec:
  controllerName: gateway.apoxy.dev/gatewayclass-controller
---
apiVersion: gateway.apoxy.dev/v1
kind: Gateway
metadata:
  name: example
spec:
  gatewayClassName: apoxy
  infrastructure:
    parametersRef:
      kind: Proxy
      name: example
  listeners:
    - protocol: HTTP
      port: 10000
      name: example
---
apiVersion: gateway.apoxy.dev/v1
kind: HTTPRoute
metadata:
  name: alpamayo
spec:
  parentRefs:
    - name: example
      port: 10000
      kind: Gateway
  hostnames:
    - "*"
  rules:
    - backendRefs:
        - kind: EdgeFunction
          group: extensions.apoxy.dev
          name: websocket
---
apiVersion: extensions.apoxy.dev/v1alpha1
kind: EdgeFunction
metadata:
  name: websocket
spec:
  mode: backend
  code:
    jsSource:
      entrypoint: "main.ts"
      assets:
        files:
          - path: "main.ts"
            content: |
              import { createServer } from "node:http";
              import { WebSocketServer } from "npm:ws";

              const server = createServer();
              const wss = new WebSocketServer({ noServer: true });

              wss.on("connection", ws => {
                  console.log("socket opened");
                  ws.on("message", (data /** Buffer */, isBinary /** bool */) => {
                      if (isBinary) {
                          console.log("socket message:", data);
                      } else {
                          console.log("socket message:", data.toString());
                      }

                      ws.send(new Date().toString());
                  });

                  ws.on("error", err => {
                      console.log("socket errored:", err.message);
                  });

                  ws.on("close", () => console.log("socket closed"));
              });

              server.on("upgrade", (req, socket, head) => {
                  wss.handleUpgrade(req, socket, head, ws => {
                      wss.emit("connection", ws, req);
                  });
              });

              server.listen(8080);
