package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"time"

	"github.com/spf13/cobra"
)

type accessLog struct {
	Timestamp     string `json:"timestamp"`
	RequestMethod string `json:"request_method"`
	RequestHost   string `json:"request_host"`
	ResponseCode  string `json:"response_code"`
}

type logRecord struct {
	ID        int       `json:"id"`
	Message   string    `json:"message"`
	Timestamp time.Time `json:"timestamp"`
}

type logResponse struct {
	Logs  []*logRecord `json:"logs"`
	Total int          `json:"total"`
}

var logsCmd = &cobra.Command{
	Use:   "logs",
	Short: "View proxy logs",
	Long: `View the request/process logs generated by your proxies.  Logs can be filtered by proxy instance
and/or date range. By default, logs are streamed in real-time.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		proxy, err := cmd.Flags().GetString("proxy")
		if err != nil {
			return err
		}

		cmd.SilenceUsage = true

		c, err := defaultAPIClient()
		if err != nil {
			return err
		}

		params := url.Values{}
		if proxy != "" {
			params.Add("query", fmt.Sprintf("proxy=%q", proxy))
		}

		resp, err := c.SendRequest(http.MethodGet, "/v1/logs?"+params.Encode(), nil)
		if err != nil {
			return err
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			return fmt.Errorf("unexpected status code: %d", resp.StatusCode)
		}

		dec := json.NewDecoder(resp.Body)
		for {
			t, err := dec.Token() // Top-level token.
			if err == io.EOF {
				break
			}
			if err != nil {
				return err
			}

			if t == "logs" {
				t, err = dec.Token() // [ delimiter.
				if err != nil {
					return err
				}
				if t != json.Delim('[') {
					return fmt.Errorf("unexpected token: %v", t)
				}

				for dec.More() { // Array of logs.
					var lr logRecord
					if err := dec.Decode(&lr); err != nil {
						return err
					}
					fmt.Printf("[accesslog] %s %s\n", lr.Timestamp.Format(time.RFC3339), lr.Message)
				}

				t, err = dec.Token() // ] delimiter.
				if err != nil {
					return err
				}
				if t != json.Delim(']') {
					return fmt.Errorf("unexpected token: %v", t)
				}
			}
		}

		return nil
	},
}

func init() {
	logsCmd.PersistentFlags().StringP("proxy", "p", "", "Proxy name")
	rootCmd.AddCommand(logsCmd)
}
